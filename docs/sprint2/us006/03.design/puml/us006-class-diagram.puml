
@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
skinparam classAttributeIconSize 0

class VehicleFleetManager {
  - String name
  - String email
  - String phone
  + registerVehicle()
}

class Vehicle {
  - String brand
  - String model
  - String type
  - Double tareWeight
  - Double grossWeight
  - Int currentKm
  - Int registerDate
  - Int acquisitionDate
  - Int maintenanceFrequency
  + Vehicle(brand, model, type, tareWeight, grossWeight, currentKm, registerDate, acquisitionDate, maintenanceFrequency)
}

class VehicleRepository {
  + boolean save(Vehicle vehicle)
  + Vehicle findByModel(String model)
}

class Organization {
  - String name
  - String vatNumber
  - String address
  - String phone
  - String email
  - List<Vehicle> fleet
  + addVehicle(Vehicle vehicle)
  + Vehicle findVehicleByModel(String model)
  + List<Vehicle> getFleet()
}

class OrganizationRepository {
  + findByName(String name)
  + findByVatNumber(String vatNumber)
}

class Repositories {
  + getInstance() : Repositories
  + getVehicleRepository() : VehicleRepository
  + getOrganizationRepository() : OrganizationRepository
}

class RegisterVehicleController {
  + RegisterVehicleController
  + Vehicle registerVehicle(VehicleFleetMnager manager, String brand, String model, String type, Double tareWeight, Double grossWeight, Integer currentKm, Date registerDate, Date acquisitionDate, Integer maintenanceFrequency)
}

class VehicleRegistrationUI {

}

note right of RegisterVehicleController
  - Vehicle details are obtained from the VFM's input
  - Updates the Organization's fleet
end note

note left of VehicleRegistrationUI
  - UI for VFM to input vehicle details
  - Communicates with RegisterVehicleController
end note

note left of Organization
  - Manages the fleet of vehicles
  - Handles organizational details
end note

note left of VehicleFleetManager
  - Responsible for managing vehicle registrations
  - Interfaces with the UI and controllers
end note

VehicleFleetManager -down-> VehicleRegistrationUI : interacts with
VehicleRegistrationUI -right-> RegisterVehicleController : sends data to
RegisterVehicleController -down-> Repositories : retrieves instances
Repositories -down-> VehicleRepository : accesses
Repositories -down-> OrganizationRepository : accesses
Organization -right-> Vehicle : has
OrganizationRepository .left.> Organization : persists

VehicleFleetManager -down-> Organization : part of
VehicleFleetManager -down-> Vehicle : registers

VehicleRepository ..> Vehicle : persists
RegisterVehicleController ..> Vehicle : creates
RegisterVehicleController ..> Organization : updates fleet

@enduml
