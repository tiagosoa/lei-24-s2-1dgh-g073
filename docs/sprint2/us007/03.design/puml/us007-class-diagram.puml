@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto


class VehicleFleetManager {
  - String name
  - String email
  - String phone
}

class Vehicle {
  - String brand
  - String model
  - String type
  - Double tareWeight
  - Double grossWeight
  - Int currentKm
  - LocalDate registerDate
  - LocalDate acquisitionDate
  - Int maintenanceFrequency
  - String plateName
  - LocalDate lastMaintenanceDate
}

class Organization {
  - String name
  - String vatNumber
  - String address
  - String phone
  - String email
  - List<Vehicle> vehicles
  + addVehicle(Vehicle vehicle)
}

class OrganizationRepository {
  + boolean save(Organization organization)
  + Organization findByName(String name)
  + Organization findByVatNumber(String vatNumber)
}

class Repositories {
  + getInstance() : Repositories
  + getVehicleRepository() : VehicleRepository
  + getOrganizationRepository() : OrganizationRepository
}

class RegisterMaintenanceController {
  + RegisterMaintenanceController(repositories: Repositories)
  + Optional<Boolean> registerMaintenance(String plateNumber, int currentKm, LocalDate maintenanceDate)
}

class RegisterMaintenanceUI {
  - RegisterMaintenanceController controller
  + displayMaintenanceForm()
  + submitMaintenanceForm(Vehicle vehicle, Date maintenanceDate,Double cost)
}

note right of RegisterMaintenanceController
  - Maintenance details are obtained from the VFM's input
  - Updates the Vehicle's maintenance records in the Organization
end note

note left of RegisterMaintenanceUI
  - UI for VFM to input vehicle maintenance details
  - Communicates with RegisterMaintenanceController
end note

note left of Organization
  - Manages a fleet of vehicles and their maintenance records
end note

note left of VehicleFleetManager
  - Responsible for managing vehicle maintenance registrations
  - Interfaces with the UI and controllers
end note

VehicleFleetManager -down-> RegisterMaintenanceUI : interacts with
RegisterMaintenanceUI -right-> RegisterMaintenanceController : sends data to
RegisterMaintenanceController -down-> Repositories : uses
Organization -right-> Vehicle : owns
RegisterMaintenanceController ..> Maintenance : creates
RegisterMaintenanceController ..> Organization : updates records

@enduml
