@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam classAttributeIconSize 0

class ApplicationSession
{
    + static getInstance()
    + getCurrentSession()
}

class UserSession
{
    + getUserEmail()
}

class HumanResourcesManager {
  - String name
  - String email
  - String phone
  + generateTeamProposal(maxSize, minSize, skills[])
}

class Skill {
  - String name
}

class Job {
  - String name
}

class Collaborator {
  - name: String
  - birthdate: String
  - admission date: String
  - address: String
  - mobile Contact: int
  - email contact: String
  - ID doc type: String
  - ID number: int
  - List<Skill> skills
  + hasSkill(skill: Skill) : boolean
}

class Team {
  - List<Collaborator> members
  + addMember(collaborator: Collaborator) : boolean
  + isFull() : boolean
  + meetsSkillRequirements(requiredSkills: List<Skill>) : boolean
}

class TeamGeneratorController {
  - int maxSize
  - int minSize
  - List<Skill> requiredSkills
  - List<Collaborator> collaborators
  + checkMinAndMaxSize() : boolean
  + getSkillList(): List<Skill>
  + getRequiredSkills(): List<RequiredSkills>
  + TeamGeneratorController(repositories: Repositories, maxSize: int, minSize: int, requiredskills: List<RequiredSkills>)
  + generateTeamProposal(maxSize, minSize, List<RequiredSkills>) : Team
}

class Repositories {
  - static instance : Repositories
  + getInstance() : Repositories
  + getCollaboratorRepository() : CollaboratorRepository
  + getSkillRepository() : SkillRepository
}

class CollaboratorRepository {
  + List<Collaborator> findAll()
  + Team selectCollaborators(List<RequiredSkills>)
}

class Organization {
  - String name
  - String vatNumber
  - List<Collaborator> collaborators
  - List<Skill> skills
  + findCollaboratorByID(String id) : Collaborator
  + generateTeamProposal(maxSize, minSize, List<RequiredSkills>)
  + selectCollaborators(List<(List<RequiredSkills>) : List<Members>
}

class TeamGeneratorUI {
}



note right of HumanResourcesManager
  - HRM inputs team size and skill criteria
end note

note left of TeamGeneratorController
  - Ensures team meets size and skill requirements
  - Team Size and required Skills are obtained from the HRM's input
  - Updates the Team Repository
end note

note bottom of Team
  - Maintains a list of team members
  - Checks if team meets size and skill requirements
end note

note left of TeamGeneratorUI
  - UI for HRM to input min. and max. team size and select skills
  - Communicates with TeamGeneratorController
end note

note bottom of Organization
  - Manages collaborators, skills, and jobs
end note

HumanResourcesManager -down-> TeamGeneratorController : uses
TeamGeneratorController -down-> Team : generates
Collaborator -left-> Skill : possesses
Collaborator -right-> Job : possesses
Organization -right-> Collaborator : manages
Organization -up-> HumanResourcesManager : belongs to
Repositories -right-> CollaboratorRepository : contains
Repositories -right-> SkillRepository : contains
TeamGeneratorController -right-> Repositories : accesses
ApplicationSession -> ApplicationSession : instance
ApplicationSession --> "1" UserSession : userSession
TeamGeneratorController ..> ApplicationSession
TeamGeneratorController ..> UserSession
TeamGeneratorUI .> TeamGeneratorController

@enduml