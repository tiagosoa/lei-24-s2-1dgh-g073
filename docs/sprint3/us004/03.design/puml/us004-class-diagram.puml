@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

class ApplicationSession
{
    + static getInstance()
    + getCurrentSession()
}

class UserSession
{
    + getUserEmail()
}

class Collaborator {
    - name: String
    - birthdate: String
    - admission date: String
    - address: String
    - mobile Contact: int
    - email contact: String
    - ID doc type: String
    - ID number: int
    + addSkill(skill)
}

class AssignSkillController {
    - List<Skill> selectedSkills
    + SkillRepository getSkillRepository()
    + CollaboratorRepository getCollaboratorRepository()
    + OrganizationRepository getOrganizationRepository()
    + AuthenticationRepository getAuthenticationRepository()
    + void assignSkillsToCollaborator(int collaboratorID, List<String> collaboratorskills)
    + HRM getHRMFromSession()
}

class Skill {
    - name: String
}

class HRManager {
  - String name
  - String vatNumber
  - String address
  - String phone
  - String email
}

 class CollaboratorRepository {
   - List<Job>: jobs
   + Optional<Collaborator> add(Collaborator collaborator)
   + Collaborator getCollaboratorByID(int IDnumber)
   + List<Collaborator> getCollaborators()
   + boolean validateCollaborator(Collaborator collaborator)
   + void updateCollaborator(Collaborator collaboratorToUpdate)
 }

class SkillRepository {
  - List<Skill> skills
  + Optional<Skill> add(Skill skill)
  + boolean validateSkill(Skill skill)
  + List<Skill> getSkills()
  + Skill getSkillByName(String name)
}

 class Organization {
   - String name
   - String vatNumber
   - String address
   - String phone
   - String email
 }

class OrganizationRepository {
  + Optional<Organization> getOrganizationByHRM(HRM hrm)
  + Optional<Organization> getOrganizationByVFM(VFM vfm)
  + Optional<Organization> getOrganizationByHRMEmail(String email)
  + Optional<Organization> add(Organization organization)
  + boolean validateOrganization(Organization organization)
}

 class Repositories {
   + getInstance() : Repositories
   + getCollaboratorRepository() : CollaboratorRepository
   + getSkillRepository() : SkillRepository
   + getOrganizationRepository() : OrganizationRepository
 }

 class AssignSkillUI {
   + int readInput(int min, int max)
 }

AssignSkillController -- Skill: assigns
Skill --> Collaborator: assigned to
HRManager -> AssignSkillUI: Uses


Repositories -> Repositories : instance
ApplicationSession -> ApplicationSession : instance
AssignSkillUI .> AssignSkillController

AssignSkillController .> Repositories : repositories

Repositories --> "1" OrganizationRepository
Repositories --> "1" CollaboratorRepository
Repositories --> "1" SkillRepository

OrganizationRepository ...> "*" Organization
ApplicationSession --> "1" UserSession : userSession

AssignSkillController ..> "1" Organization : organization
AssignSkillController ..> ApplicationSession
AssignSkillController ..> UserSession
Collaborator --> HRManager : registered by

Organization --> "*" HRManager : employs
Organization --> "*" Collaborator : employs
Organization --> "*" Skill : owns

note right of AssignSkillController
  - Collaborator ID and Skill name are obtained from the HRM's selection
  - Updates the Collaborator Repository
end note

note right of HRManager
  - HRM initiates skill assignment
end note

note left of AssignSkillUI
  - UI for HRM to select collaborator(s) and skill(s) to be assigned
  - Communicates with AssignSkillController
end note

note left of Organization
  - Owns skills and collaborators
  - Handles organizational details
end note

@enduml