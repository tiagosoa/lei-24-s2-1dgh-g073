
@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
skinparam classAttributeIconSize 0

class VehicleFleetManager {
  - String name
  - String email
  - String position
  - int phone
}

class Vehicle {
  - String brand
  - String model
  - String type
  - Double tareWeight
  - Double grossWeight
  - int currentKm
  - LocalDate registerDate
  - LocalDate acquisitionDate
  - int maintenanceFrequency
  - String plateNumber
  - LocalDate lastMaintenanceDate
  + validateTrait(Object trait)
}


class Organization {
  - String name
  - String vatNumber
  - String address
  - String phone
  - String email
}

class OrganizationRepository {
  + Optional<Organization> getOrganizationByHRM(HRM hrm)
  + Optional<Organization> getOrganizationByVFM(VFM vfm)
  + Optional<Organization> getOrganizationByHRMEmail(String email)
  + Optional<Organization> add(Organization organization)
  + boolean validateOrganization(Organization organization)
}

class Repositories {
  + Repositories getInstance()
  + OrganizationRepository getOrganizationRepository()
  + VehicleRepository getVehicleRepository()
}

class AddVehicleController {
  + VehicleRepository getVehicleRepository()
  + OrganizationRepository getOrganizationRepository()
  + AuthenticationRepository getAuthenticationRepository()
  + Optional<Vehicle> addVehicle(String model,String brand,String type, VFM vfm)
  + VFM getVFMFromSession()
}

class AddVehicleUI {
  + AddVehicleController getController()
  + String requestVehicleModel()
  + String requestVehicleBrand()
  + String requestVehicleType()
  + double requestVehicleTareWeight()
  + double requestVehicleGrossWeight()
  + double requestVehicleCurrentKm()
  + LocalDate requestVehicleRegisterDate()
  + LocalDate requestVehicleAcquisitionDate()
  + int requestVehicleMaintenanceFrequencyKM()
  + String requestVehiclePlateNumber()
  + LocalDate requestVehicleLastMaintenanceDate()
}

class VehicleRepository {
  - List<Vehicle> vehicles
  + Vehicle getVehiclebyPlateNumber(String plateNumber)
  + boolean validateVehicle(Vehicle vehicle)
  + List<Vehicle> getVehicles()
  + boolean registerMaintenance(plateNumber, currentKm, maintenanceDate)
  + Optional<Vehicle> createVehicle(String model,String brand, String type, VFM vfm)
  + boolean addVehicle(Vehicle vehicle)
  + boolean vehiclesDoNotContain(Vehicle vehicle)
}

note right of AddVehicleController
  - Vehicle details are obtained from the VFM's input
  - Updates the Organization's fleet
end note

note left of AddVehicleUI
  - UI for VFM to input vehicle details
  - Communicates with AddVehicleController
end note

note left of Organization
  - Manages the fleet of vehicles
  - Handles organizational details
end note

note left of VehicleFleetManager
  - Responsible for managing vehicle registrations
  - Interfaces with the UI and controllers
end note

VehicleFleetManager -down-> AddVehicleUI : interacts with
AddVehicleUI -right-> AddVehicleController : sends data to
AddVehicleController -down-> Repositories : retrieves instances
Repositories -down-> OrganizationRepository : accesses
Organization -right-> Vehicle : has
OrganizationRepository .left.> Organization : persists
Repositories -down-> VehicleRepository : accesses

VehicleFleetManager -down-> Organization : part of
VehicleFleetManager -down-> Vehicle : registers

AddVehicleController ..> Vehicle : creates
AddVehicleController ..> Organization : updates vehicles

@enduml
