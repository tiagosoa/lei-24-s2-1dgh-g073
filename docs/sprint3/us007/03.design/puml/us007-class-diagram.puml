@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto


class VehicleFleetManager {
  - String name
  - String email
  - String position
  - int phone
}

class Vehicle {
  - String brand
  - String model
  - String type
  - Double tareWeight
  - Double grossWeight
  - Int currentKm
  - LocalDate registerDate
  - LocalDate acquisitionDate
  - Int maintenanceFrequency
  - String plateName
  - LocalDate lastMaintenanceDate
  + validateTrait(Object trait)
}

class Organization {
  - String name
  - String vatNumber
  - String address
  - String phone
  - String email
}

class OrganizationRepository {
  + Optional<Organization> getOrganizationByHRM(HRM hrm)
  + Optional<Organization> getOrganizationByVFM(VFM vfm)
  + Optional<Organization> getOrganizationByHRMEmail(String email)
  + Optional<Organization> add(Organization organization)
  + boolean validateOrganization(Organization organization)
}

class Repositories {
  + Repositories getInstance()
  + OrganizationRepository getOrganizationRepository()
  + VehicleRepository getVehicleRepository()
}

class RegisterMaintenanceController {
  + RegisterMaintenanceController(repositories: Repositories)
  + Optional<Boolean> registerMaintenance(String plateNumber, int currentKm, LocalDate maintenanceDate)
}

class RegisterMaintenanceUI {
        - controller: RegisterMaintenanceController
        - vehiclePlateNumber: String
        - currentKM: int
        - maintenanceDate: LocalDate
        - vehicleRepository: VehicleRepository
        - scanner: Scanner
        + RegisterMaintenanceUI()
        + getController(): RegisterMaintenanceController
        + run()
        + submitData()
        + requestData()
        + requestVehiclePlateNumber(): String
        + readInput(min: int, max: int): int
        + requestCurrentKMs(): int
        + requestMaintenanceDate(): LocalDate
}

note right of RegisterMaintenanceController
  - Maintenance details are obtained from the VFM's input
  - Updates the Vehicle's maintenance records in the Organization
end note

note left of RegisterMaintenanceUI
  - UI for VFM to input vehicle maintenance details
  - Communicates with RegisterMaintenanceController
end note

note left of Organization
  - Manages a fleet of vehicles and their maintenance records
end note

note left of VehicleFleetManager
  - Responsible for managing vehicle maintenance registrations
  - Interfaces with the UI and controllers
end note

VehicleFleetManager -right> OrganizationRepository
VehicleFleetManager -down-> RegisterMaintenanceUI : interacts with
RegisterMaintenanceUI -right-> RegisterMaintenanceController : sends data to
RegisterMaintenanceController -down-> Repositories : uses
Organization -right-> Vehicle : owns
VehicleRepository ..> Vehicle : registers maintenance date to
RegisterMaintenanceController ..> Organization : updates records

@enduml
